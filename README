This is ReMONSTERate, a utility to import arbitrary monster sprites into FF6.

Important information:
    ReMONSTERate expands the rom and makes several ASM edits to relocate sprites to the free space. The space used is from $314000 to around $390000 ($f14000 to $f90000) depending on the imported sprites. The ASM edits are in `tables/monster_expansion_patch.txt` This rom expansion allows every monster to have a unique sprite and a unique palette, without worrying about running out of space.

    ReMONSTERate has a randomization feature with a tagging system. See `images_and_tags.txt` for information on how to add sprites to the pool and tag them. See `monsters_and_tags.txt` for information on how to require or block specific tags for specific monsters.

    You can import ReMONSTERate to your Python3 project. If you do this, you must have the Python `pillow` module installed to use it. `pillow` is a Python imaging library, and is required to analyze and transform the sprites. It is easiest to install `pillow` with `pip`, the Python package installer.

    The simplest way to use ReMONSTERate in your Python project is with the `remonsterate` function.

```python
from remonsterate.remonsterate import remonsterate
remonsterate(rom_filename, seed, images_filename, monsters_filename)
```

    This will automatically read the tagged sprites listed in `images_filename` and randomly import them into `rom_filename` based on the restrictions set by `monsters_filename`. Note that the edits to `rom_filename` are immediate - you must back up your rom yourself!

    You can also use remonsterate to develop your own randomization process:

```python
from remonsterate.remonsterate import (
    begin_remonster, finish_remonster, MonsterSpriteObject)
from PIL import Image

begin_remonster(MY_ROM_FILENAME, MY_SEED)

images = [Image.open(filename) for filename in MY_IMAGE_FILENAMES]
monster = MonsterSpriteObject.get(MY_MONSTER_INDEX)
monster.select_image(images)

finish_remonster()
```

    This will randomly select an image from `images` for your chosen `monster`. If you want even more control:

```python
monster.load_image(image)
finish_remonster()
```

    This will allow you to load an image of your choice manually. You can easily break the game this way, for example, by using a large sprite for an enemy that is supposed to be small.

    If you have questions or feedback, do not hesitate to contact me.
        https://github.com/abyssonym
        https://twitter.com/abyssonym

    SPECIAL THANKS to CtrlxZ for commissioning this utility.
